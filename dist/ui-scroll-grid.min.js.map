{"version":3,"file":"ui-scroll-grid.min.js","mappings":"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","sources":["webpack://angular-ui-scroll/./src/ui-scroll-grid.js"],"sourcesContent":["angular.module('ui.scroll.grid', [])\r\n  .directive('uiScrollTh', ['$log', '$timeout', function(console, $timeout) {\r\n\r\n    function GridAdapter(controller) {\r\n\r\n      this.getLayout = () => controller.getLayout();\r\n\r\n      this.applyLayout = (layout) => controller.applyLayout(layout);\r\n\r\n      this.columnFromPoint = (x, y) => controller.columnFromPoint(x, y);\r\n\r\n      Object.defineProperty(this, 'columns', { get: () => controller.getColumns() });\r\n    }\r\n\r\n    function ColumnAdapter(controller, column) {\r\n\r\n      this.css = function( /* attr, value */ ) {\r\n        var attr = arguments[0];\r\n        var value = arguments[1];\r\n        if (arguments.length == 1) {\r\n          return column.header.css(attr);\r\n        }\r\n        if (arguments.length == 2) {\r\n          column.header.css(attr, value);\r\n          controller.forEachRow((row) => row[column.id].css(attr, value));\r\n          column.css[attr] = value;\r\n        }\r\n      };\r\n\r\n      this.moveBefore = (index) => controller.moveBefore(column, index);\r\n\r\n      this.exchangeWith = (index) => controller.exchangeWith(column, index);\r\n\r\n      Object.defineProperty(this, 'columnId', { get: () => column.id });\r\n    }\r\n\r\n    function ColumnController(controller, columns, header) {\r\n\r\n      this.header = header;\r\n      this.css = {};\r\n      this.mapTo = columns.length;\r\n      this.id = columns.length;\r\n\r\n      // controller api methods\r\n\r\n      this.applyLayout = function(layout) {\r\n        this.css = angular.extend({}, layout.css);\r\n        this.mapTo = layout.mapTo;\r\n        applyCss(this.header, this.css);\r\n      };\r\n\r\n      this.moveBefore = function(target) {\r\n        if (target) {\r\n          moveBefore(header, target.header);\r\n          controller.forEachRow((row) => moveBefore(row[this.id], row[target.id]));\r\n        } else {\r\n          moveLast(header);\r\n          controller.forEachRow((row) => moveLast(row[this.id]));\r\n        }\r\n      };\r\n\r\n      this.columnFromPoint = function(x, y) {\r\n        if (insidePoint(header, x, y)) {\r\n          return this;\r\n        }\r\n        let result = null;\r\n        controller.forEachRow((row) =>\r\n          result = insidePoint(row[this.id], x, y) ? this : result\r\n        );\r\n        return result;\r\n      };\r\n\r\n      this.applyCss = function(target) {\r\n        applyCss(target, this.css);\r\n      };\r\n\r\n      // function definitions\r\n\r\n      function insidePoint(element, x, y) {\r\n        let offset = element.offset();\r\n        if (x < offset.left || offset.left + element.outerWidth(true) < x)\r\n          return false;\r\n        if (y < offset.top || offset.top + element.outerHeight(true) < y)\r\n          return false;\r\n        return true;\r\n      }\r\n\r\n      function moveBefore(element, target) {\r\n        element.detach();\r\n        target.before(element);\r\n      }\r\n\r\n      function moveLast(element) {\r\n        let parent = element.parent();\r\n        element.detach();\r\n        parent.append(element);\r\n      }\r\n\r\n      function applyCss(target, css) {\r\n        target.removeAttr('style');\r\n        for (let attr in css) {\r\n          if (css.hasOwnProperty(attr)) {\r\n            target.css(attr, css[attr]);\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    function GridController(scrollViewport) {\r\n      let columns = [];\r\n      let rowMap = new Map();\r\n\r\n      $timeout(() => {\r\n        scrollViewport.adapter.publicContext.gridAdapter = new GridAdapter(this);\r\n        scrollViewport.adapter.transform = (scope, item) => transform(rowMap.get(scope), item);\r\n      });\r\n\r\n      this.registerColumn = function(header) {\r\n        columns.push(new ColumnController(this, columns, header));\r\n      };\r\n\r\n      this.registerCell = function(scope, cell) {\r\n        let row = rowMap.get(scope);\r\n        if (!row) {\r\n          row = [];\r\n          rowMap.set(scope, row);\r\n        }\r\n        if (row.length >= columns.length) {\r\n          return false;\r\n        }\r\n        row.push(cell);\r\n        return true;\r\n      };\r\n\r\n      this.unregisterCell = function(scope, cell) {\r\n        let row = rowMap.get(scope);\r\n        let i = row.indexOf(cell);\r\n        row.splice(i, 1);\r\n        if (!row.length) {\r\n          rowMap.delete(scope);\r\n        }\r\n      };\r\n\r\n      this.forEachRow = function(callback) {\r\n        rowMap.forEach(callback);\r\n      };\r\n\r\n      this.getColumns = function() {\r\n        let result = [];\r\n        columns.slice()\r\n          .sort((a, b) => a.mapTo - b.mapTo)\r\n          .forEach((column) => result.push(new ColumnAdapter(this, column)));\r\n        return result;\r\n      };\r\n\r\n      this.getLayout = function() {\r\n        let result = [];\r\n        columns.forEach((column, index) => result.push({\r\n          index: index,\r\n          css: angular.extend({}, column.css),\r\n          mapTo: column.mapTo\r\n        }));\r\n        return result;\r\n      };\r\n\r\n      this.applyLayout = function(layouts) {\r\n        if (!layouts || layouts.length != columns.length) {\r\n          throw new Error('Failed to apply layout - number of layouts should match number of columns');\r\n        }\r\n        layouts.forEach((layout, index) => columns[index].applyLayout(layout));\r\n        transform(columns.map((column) => column.header));\r\n        rowMap.forEach((row) => transform(row));\r\n      };\r\n\r\n      this.moveBefore = function(selected, target) {\r\n        let index = target;\r\n\r\n        if (target % 1 !== 0) {\r\n          index = target ? columns[target.columnId].mapTo : columns.length;\r\n        }\r\n        if (index < 0 || index > columns.length) {\r\n          return; // throw an error?\r\n        }\r\n\r\n        let mapTo = selected.mapTo,\r\n          next = null;\r\n        index -= mapTo < index ? 1 : 0;\r\n\r\n        columns.forEach(c => {\r\n          c.mapTo -= c.mapTo > mapTo ? 1 : 0;\r\n          c.mapTo += c.mapTo >= index ? 1 : 0;\r\n          next = c.mapTo === index + 1 ? c : next;\r\n        });\r\n\r\n        selected.mapTo = index;\r\n        selected.moveBefore(next);\r\n      };\r\n\r\n      this.exchangeWith = function(selected, index) {\r\n        if (index < 0 || index >= columns.length) {\r\n          return;\r\n        }\r\n        columns.find(c => c.mapTo === index).mapTo = selected.mapTo;\r\n        selected.mapTo = index;\r\n      };\r\n\r\n      this.columnFromPoint = function(x, y) {\r\n        let column = columns.find(col => col.columnFromPoint(x, y));\r\n        return column ? new ColumnAdapter(this, column) : undefined;\r\n      };\r\n\r\n      // function definitions\r\n\r\n      function transform(row) {\r\n        let parent = row[0].parent();\r\n        let visible = [];\r\n\r\n        row.forEach((cell, index) => {\r\n          columns[index].applyCss(cell);\r\n          visible[columns[index].mapTo] = row[index];\r\n          row[index].detach();\r\n        });\r\n\r\n        visible.forEach(cell => parent.append(cell));\r\n      }\r\n\r\n    }\r\n\r\n    return {\r\n      require: ['^^uiScrollViewport'],\r\n      restrict: 'A',\r\n      link: ($scope, element, $attr, controllers) => {\r\n        controllers[0].gridController = controllers[0].gridController || new GridController(controllers[0]);\r\n        controllers[0].gridController.registerColumn(element);\r\n      }\r\n    };\r\n  }])\r\n\r\n.directive('uiScrollTd', function() {\r\n  return {\r\n    require: ['?^^uiScrollViewport'],\r\n    restrict: 'A',\r\n    link: ($scope, element, $attr, controllers) => {\r\n      if (!controllers[0]) {\r\n        return;\r\n      }\r\n      let scope = $scope;\r\n      let tdInitializer = $scope.uiScrollTdInitializer;\r\n      if (!tdInitializer) {\r\n        tdInitializer = $scope.uiScrollTdInitializer = {\r\n          linking: true\r\n        };\r\n      }\r\n      if (!tdInitializer.linking) {\r\n        scope = tdInitializer.scope;\r\n      }\r\n      let gridController = controllers[0].gridController;\r\n      if (gridController.registerCell(scope, element)) {\r\n        $scope.$on('$destroy', () => gridController.unregisterCell(scope, element));\r\n      }\r\n      if (!tdInitializer.linking) {\r\n        tdInitializer.onLink();\r\n      }\r\n    }\r\n  };\r\n});\r\n"],"names":["angular","module","directive","console","$timeout","GridAdapter","controller","this","getLayout","applyLayout","layout","columnFromPoint","x","y","Object","defineProperty","get","getColumns","ColumnAdapter","column","css","attr","arguments","value","length","header","forEachRow","row","id","moveBefore","index","exchangeWith","ColumnController","columns","insidePoint","element","offset","left","outerWidth","top","outerHeight","target","detach","before","moveLast","parent","append","applyCss","removeAttr","hasOwnProperty","mapTo","extend","_this","_this2","result","GridController","scrollViewport","_this3","rowMap","Map","transform","visible","forEach","cell","adapter","publicContext","gridAdapter","scope","item","registerColumn","push","registerCell","set","unregisterCell","i","indexOf","splice","delete","callback","_this4","slice","sort","a","b","layouts","Error","map","selected","columnId","next","c","find","col","undefined","require","restrict","link","$scope","$attr","controllers","gridController","tdInitializer","uiScrollTdInitializer","linking","$on","onLink"],"sourceRoot":""}